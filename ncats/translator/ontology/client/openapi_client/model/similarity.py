# coding: utf-8

"""
    NCATS Translator Modules Ontology Jaccard Similarity Server

    NCATS Translator Modules Ontology Jaccard Similarity Server  # noqa: E501

    The version of the OpenAPI document: 0.0.1
    Contact: richard@starinformatics.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class Similarity(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'input_id': 'str',
        'input_symbol': 'str',
        'hit_symbol': 'str',
        'hit_id': 'str',
        'score': 'str',
        'shared_terms': 'list[list]',
        'shared_term_names': 'list[list]'
    }

    attribute_map = {
        'input_id': 'input_id',
        'input_symbol': 'input_symbol',
        'hit_symbol': 'hit_symbol',
        'hit_id': 'hit_id',
        'score': 'score',
        'shared_terms': 'shared_terms',
        'shared_term_names': 'shared_term_names'
    }

    def __init__(self, input_id=None, input_symbol=None, hit_symbol=None, hit_id=None, score=None, shared_terms=None, shared_term_names=None):  # noqa: E501
        """Similarity - a model defined in OpenAPI"""  # noqa: E501

        self._input_id = None
        self._input_symbol = None
        self._hit_symbol = None
        self._hit_id = None
        self._score = None
        self._shared_terms = None
        self._shared_term_names = None
        self.discriminator = None

        self.input_id = input_id
        self.input_symbol = input_symbol
        self.hit_symbol = hit_symbol
        self.hit_id = hit_id
        self.score = score
        self.shared_terms = shared_terms
        self.shared_term_names = shared_term_names

    @property
    def input_id(self):
        """Gets the input_id of this Similarity.  # noqa: E501


        :return: The input_id of this Similarity.  # noqa: E501
        :rtype: str
        """
        return self._input_id

    @input_id.setter
    def input_id(self, input_id):
        """Sets the input_id of this Similarity.


        :param input_id: The input_id of this Similarity.  # noqa: E501
        :type: str
        """
        if input_id is None:
            raise ValueError("Invalid value for `input_id`, must not be `None`")  # noqa: E501

        self._input_id = input_id

    @property
    def input_symbol(self):
        """Gets the input_symbol of this Similarity.  # noqa: E501


        :return: The input_symbol of this Similarity.  # noqa: E501
        :rtype: str
        """
        return self._input_symbol

    @input_symbol.setter
    def input_symbol(self, input_symbol):
        """Sets the input_symbol of this Similarity.


        :param input_symbol: The input_symbol of this Similarity.  # noqa: E501
        :type: str
        """
        if input_symbol is None:
            raise ValueError("Invalid value for `input_symbol`, must not be `None`")  # noqa: E501

        self._input_symbol = input_symbol

    @property
    def hit_symbol(self):
        """Gets the hit_symbol of this Similarity.  # noqa: E501


        :return: The hit_symbol of this Similarity.  # noqa: E501
        :rtype: str
        """
        return self._hit_symbol

    @hit_symbol.setter
    def hit_symbol(self, hit_symbol):
        """Sets the hit_symbol of this Similarity.


        :param hit_symbol: The hit_symbol of this Similarity.  # noqa: E501
        :type: str
        """
        if hit_symbol is None:
            raise ValueError("Invalid value for `hit_symbol`, must not be `None`")  # noqa: E501

        self._hit_symbol = hit_symbol

    @property
    def hit_id(self):
        """Gets the hit_id of this Similarity.  # noqa: E501


        :return: The hit_id of this Similarity.  # noqa: E501
        :rtype: str
        """
        return self._hit_id

    @hit_id.setter
    def hit_id(self, hit_id):
        """Sets the hit_id of this Similarity.


        :param hit_id: The hit_id of this Similarity.  # noqa: E501
        :type: str
        """
        if hit_id is None:
            raise ValueError("Invalid value for `hit_id`, must not be `None`")  # noqa: E501

        self._hit_id = hit_id

    @property
    def score(self):
        """Gets the score of this Similarity.  # noqa: E501


        :return: The score of this Similarity.  # noqa: E501
        :rtype: str
        """
        return self._score

    @score.setter
    def score(self, score):
        """Sets the score of this Similarity.


        :param score: The score of this Similarity.  # noqa: E501
        :type: str
        """
        if score is None:
            raise ValueError("Invalid value for `score`, must not be `None`")  # noqa: E501

        self._score = score

    @property
    def shared_terms(self):
        """Gets the shared_terms of this Similarity.  # noqa: E501

        List of shared term identifiers   # noqa: E501

        :return: The shared_terms of this Similarity.  # noqa: E501
        :rtype: list[list]
        """
        return self._shared_terms

    @shared_terms.setter
    def shared_terms(self, shared_terms):
        """Sets the shared_terms of this Similarity.

        List of shared term identifiers   # noqa: E501

        :param shared_terms: The shared_terms of this Similarity.  # noqa: E501
        :type: list[list]
        """
        if shared_terms is None:
            raise ValueError("Invalid value for `shared_terms`, must not be `None`")  # noqa: E501

        self._shared_terms = shared_terms

    @property
    def shared_term_names(self):
        """Gets the shared_term_names of this Similarity.  # noqa: E501

        List of shared term human readable names   # noqa: E501

        :return: The shared_term_names of this Similarity.  # noqa: E501
        :rtype: list[list]
        """
        return self._shared_term_names

    @shared_term_names.setter
    def shared_term_names(self, shared_term_names):
        """Sets the shared_term_names of this Similarity.

        List of shared term human readable names   # noqa: E501

        :param shared_term_names: The shared_term_names of this Similarity.  # noqa: E501
        :type: list[list]
        """
        if shared_term_names is None:
            raise ValueError("Invalid value for `shared_term_names`, must not be `None`")  # noqa: E501

        self._shared_term_names = shared_term_names

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Similarity):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
