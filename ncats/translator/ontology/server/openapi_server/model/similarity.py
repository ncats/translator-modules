# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.model.base_model_ import Model
from openapi_server import util


class Similarity(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, input_id=None, input_symbol=None, hit_symbol=None, hit_id=None, score=None, shared_terms=None, shared_term_names=None):  # noqa: E501
        """Similarity - a model defined in OpenAPI

        :param input_id: The input_id of this Similarity.  # noqa: E501
        :type input_id: str
        :param input_symbol: The input_symbol of this Similarity.  # noqa: E501
        :type input_symbol: str
        :param hit_symbol: The hit_symbol of this Similarity.  # noqa: E501
        :type hit_symbol: str
        :param hit_id: The hit_id of this Similarity.  # noqa: E501
        :type hit_id: str
        :param score: The score of this Similarity.  # noqa: E501
        :type score: str
        :param shared_terms: The shared_terms of this Similarity.  # noqa: E501
        :type shared_terms: List[List]
        :param shared_term_names: The shared_term_names of this Similarity.  # noqa: E501
        :type shared_term_names: List[List]
        """
        self.openapi_types = {
            'input_id': str,
            'input_symbol': str,
            'hit_symbol': str,
            'hit_id': str,
            'score': str,
            'shared_terms': List[List],
            'shared_term_names': List[List]
        }

        self.attribute_map = {
            'input_id': 'input_id',
            'input_symbol': 'input_symbol',
            'hit_symbol': 'hit_symbol',
            'hit_id': 'hit_id',
            'score': 'score',
            'shared_terms': 'shared_terms',
            'shared_term_names': 'shared_term_names'
        }

        self._input_id = input_id
        self._input_symbol = input_symbol
        self._hit_symbol = hit_symbol
        self._hit_id = hit_id
        self._score = score
        self._shared_terms = shared_terms
        self._shared_term_names = shared_term_names

    @classmethod
    def from_dict(cls, dikt) -> 'Similarity':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Similarity of this Similarity.  # noqa: E501
        :rtype: Similarity
        """
        return util.deserialize_model(dikt, cls)

    @property
    def input_id(self):
        """Gets the input_id of this Similarity.


        :return: The input_id of this Similarity.
        :rtype: str
        """
        return self._input_id

    @input_id.setter
    def input_id(self, input_id):
        """Sets the input_id of this Similarity.


        :param input_id: The input_id of this Similarity.
        :type input_id: str
        """
        if input_id is None:
            raise ValueError("Invalid value for `input_id`, must not be `None`")  # noqa: E501

        self._input_id = input_id

    @property
    def input_symbol(self):
        """Gets the input_symbol of this Similarity.


        :return: The input_symbol of this Similarity.
        :rtype: str
        """
        return self._input_symbol

    @input_symbol.setter
    def input_symbol(self, input_symbol):
        """Sets the input_symbol of this Similarity.


        :param input_symbol: The input_symbol of this Similarity.
        :type input_symbol: str
        """
        if input_symbol is None:
            raise ValueError("Invalid value for `input_symbol`, must not be `None`")  # noqa: E501

        self._input_symbol = input_symbol

    @property
    def hit_symbol(self):
        """Gets the hit_symbol of this Similarity.


        :return: The hit_symbol of this Similarity.
        :rtype: str
        """
        return self._hit_symbol

    @hit_symbol.setter
    def hit_symbol(self, hit_symbol):
        """Sets the hit_symbol of this Similarity.


        :param hit_symbol: The hit_symbol of this Similarity.
        :type hit_symbol: str
        """
        if hit_symbol is None:
            raise ValueError("Invalid value for `hit_symbol`, must not be `None`")  # noqa: E501

        self._hit_symbol = hit_symbol

    @property
    def hit_id(self):
        """Gets the hit_id of this Similarity.


        :return: The hit_id of this Similarity.
        :rtype: str
        """
        return self._hit_id

    @hit_id.setter
    def hit_id(self, hit_id):
        """Sets the hit_id of this Similarity.


        :param hit_id: The hit_id of this Similarity.
        :type hit_id: str
        """
        if hit_id is None:
            raise ValueError("Invalid value for `hit_id`, must not be `None`")  # noqa: E501

        self._hit_id = hit_id

    @property
    def score(self):
        """Gets the score of this Similarity.


        :return: The score of this Similarity.
        :rtype: str
        """
        return self._score

    @score.setter
    def score(self, score):
        """Sets the score of this Similarity.


        :param score: The score of this Similarity.
        :type score: str
        """
        if score is None:
            raise ValueError("Invalid value for `score`, must not be `None`")  # noqa: E501

        self._score = score

    @property
    def shared_terms(self):
        """Gets the shared_terms of this Similarity.

        List of shared term identifiers   # noqa: E501

        :return: The shared_terms of this Similarity.
        :rtype: List[List]
        """
        return self._shared_terms

    @shared_terms.setter
    def shared_terms(self, shared_terms):
        """Sets the shared_terms of this Similarity.

        List of shared term identifiers   # noqa: E501

        :param shared_terms: The shared_terms of this Similarity.
        :type shared_terms: List[List]
        """
        if shared_terms is None:
            raise ValueError("Invalid value for `shared_terms`, must not be `None`")  # noqa: E501

        self._shared_terms = shared_terms

    @property
    def shared_term_names(self):
        """Gets the shared_term_names of this Similarity.

        List of shared term human readable names   # noqa: E501

        :return: The shared_term_names of this Similarity.
        :rtype: List[List]
        """
        return self._shared_term_names

    @shared_term_names.setter
    def shared_term_names(self, shared_term_names):
        """Sets the shared_term_names of this Similarity.

        List of shared term human readable names   # noqa: E501

        :param shared_term_names: The shared_term_names of this Similarity.
        :type shared_term_names: List[List]
        """
        if shared_term_names is None:
            raise ValueError("Invalid value for `shared_term_names`, must not be `None`")  # noqa: E501

        self._shared_term_names = shared_term_names
