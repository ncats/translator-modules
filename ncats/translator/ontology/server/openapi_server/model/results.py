# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.model.base_model_ import Model
from openapi_server.model.computation_id import ComputationId
from openapi_server.model.similarity import Similarity
from openapi_server import util

from openapi_server.model.computation_id import ComputationId  # noqa: E501
from openapi_server.model.similarity import Similarity  # noqa: E501

class Results(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, computation_id=None, similarities=None):  # noqa: E501
        """Results - a model defined in OpenAPI

        :param computation_id: The computation_id of this Results.  # noqa: E501
        :type computation_id: ComputationId
        :param similarities: The similarities of this Results.  # noqa: E501
        :type similarities: List[Similarity]
        """
        self.openapi_types = {
            'computation_id': ComputationId,
            'similarities': List[Similarity]
        }

        self.attribute_map = {
            'computation_id': 'computation_id',
            'similarities': 'similarities'
        }

        self._computation_id = computation_id
        self._similarities = similarities

    @classmethod
    def from_dict(cls, dikt) -> 'Results':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Results of this Results.  # noqa: E501
        :rtype: Results
        """
        return util.deserialize_model(dikt, cls)

    @property
    def computation_id(self):
        """Gets the computation_id of this Results.


        :return: The computation_id of this Results.
        :rtype: ComputationId
        """
        return self._computation_id

    @computation_id.setter
    def computation_id(self, computation_id):
        """Sets the computation_id of this Results.


        :param computation_id: The computation_id of this Results.
        :type computation_id: ComputationId
        """
        if computation_id is None:
            raise ValueError("Invalid value for `computation_id`, must not be `None`")  # noqa: E501

        self._computation_id = computation_id

    @property
    def similarities(self):
        """Gets the similarities of this Results.

        List of annotated Jaccard similarity results   # noqa: E501

        :return: The similarities of this Results.
        :rtype: List[Similarity]
        """
        return self._similarities

    @similarities.setter
    def similarities(self, similarities):
        """Sets the similarities of this Results.

        List of annotated Jaccard similarity results   # noqa: E501

        :param similarities: The similarities of this Results.
        :type similarities: List[Similarity]
        """
        if similarities is None:
            raise ValueError("Invalid value for `similarities`, must not be `None`")  # noqa: E501

        self._similarities = similarities
