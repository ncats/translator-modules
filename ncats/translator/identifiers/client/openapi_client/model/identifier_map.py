# coding: utf-8

"""
    NCATS Translator Modules Identifier Resolution Server

    NCATS Translator Modules Identifier Resolution Server  # noqa: E501

    The version of the OpenAPI document: 0.0.1
    Contact: richard@starinformatics.com
    Generated by: https://openapi-generator.tech
"""


import pprint

import six


class IdentifierMap(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'map_identifier': 'QueryId',
        'keys': 'list[str]',
        'records': 'list[list]'
    }

    attribute_map = {
        'map_identifier': 'map_identifier',
        'keys': 'keys',
        'records': 'records'
    }

    def __init__(self, map_identifier=None, keys=None, records=None):  # noqa: E501
        """IdentifierMap - a model defined in OpenAPI"""  # noqa: E501

        self._map_identifier = None
        self._keys = None
        self._records = None
        self.discriminator = None

        self.map_identifier = map_identifier
        self.keys = keys
        self.records = records

    @property
    def map_identifier(self):
        """Gets the map_identifier of this IdentifierMap.  # noqa: E501


        :return: The map_identifier of this IdentifierMap.  # noqa: E501
        :rtype: QueryId
        """
        return self._map_identifier

    @map_identifier.setter
    def map_identifier(self, map_identifier):
        """Sets the map_identifier of this IdentifierMap.


        :param map_identifier: The map_identifier of this IdentifierMap.  # noqa: E501
        :type: QueryId
        """
        if map_identifier is None:
            raise ValueError("Invalid value for `map_identifier`, must not be `None`")  # noqa: E501

        self._map_identifier = map_identifier

    @property
    def keys(self):
        """Gets the keys of this IdentifierMap.  # noqa: E501

        ordered list of identifier map (header/column) keys  # noqa: E501

        :return: The keys of this IdentifierMap.  # noqa: E501
        :rtype: list[str]
        """
        return self._keys

    @keys.setter
    def keys(self, keys):
        """Sets the keys of this IdentifierMap.

        ordered list of identifier map (header/column) keys  # noqa: E501

        :param keys: The keys of this IdentifierMap.  # noqa: E501
        :type: list[str]
        """
        if keys is None:
            raise ValueError("Invalid value for `keys`, must not be `None`")  # noqa: E501

        self._keys = keys

    @property
    def records(self):
        """Gets the records of this IdentifierMap.  # noqa: E501

        list of identifier map entries for every identifier registered in the map   # noqa: E501

        :return: The records of this IdentifierMap.  # noqa: E501
        :rtype: list[list]
        """
        return self._records

    @records.setter
    def records(self, records):
        """Sets the records of this IdentifierMap.

        list of identifier map entries for every identifier registered in the map   # noqa: E501

        :param records: The records of this IdentifierMap.  # noqa: E501
        :type: list[list]
        """
        if records is None:
            raise ValueError("Invalid value for `records`, must not be `None`")  # noqa: E501

        self._records = records

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IdentifierMap):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
