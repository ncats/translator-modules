# coding: utf-8

"""
    NCATS Translator Modules Identifier Resolution Server

    NCATS Translator Modules Identifier Resolution Server  # noqa: E501

    The version of the OpenAPI document: 0.0.1
    Contact: richard@starinformatics.com
    Generated by: https://openapi-generator.tech
"""


import pprint

import six


class IdentifierMapping(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'source_identifier': 'str',
        'target_namespace': 'str',
        'target_identifier': 'str'
    }

    attribute_map = {
        'source_identifier': 'source_identifier',
        'target_namespace': 'target_namespace',
        'target_identifier': 'target_identifier'
    }

    def __init__(self, source_identifier=None, target_namespace=None, target_identifier=None):  # noqa: E501
        """IdentifierMapping - a model defined in OpenAPI"""  # noqa: E501

        self._source_identifier = None
        self._target_namespace = None
        self._target_identifier = None
        self.discriminator = None

        self.source_identifier = source_identifier
        self.target_namespace = target_namespace
        self.target_identifier = target_identifier

    @property
    def source_identifier(self):
        """Gets the source_identifier of this IdentifierMapping.  # noqa: E501


        :return: The source_identifier of this IdentifierMapping.  # noqa: E501
        :rtype: str
        """
        return self._source_identifier

    @source_identifier.setter
    def source_identifier(self, source_identifier):
        """Sets the source_identifier of this IdentifierMapping.


        :param source_identifier: The source_identifier of this IdentifierMapping.  # noqa: E501
        :type: str
        """
        if source_identifier is None:
            raise ValueError("Invalid value for `source_identifier`, must not be `None`")  # noqa: E501

        self._source_identifier = source_identifier

    @property
    def target_namespace(self):
        """Gets the target_namespace of this IdentifierMapping.  # noqa: E501


        :return: The target_namespace of this IdentifierMapping.  # noqa: E501
        :rtype: str
        """
        return self._target_namespace

    @target_namespace.setter
    def target_namespace(self, target_namespace):
        """Sets the target_namespace of this IdentifierMapping.


        :param target_namespace: The target_namespace of this IdentifierMapping.  # noqa: E501
        :type: str
        """
        if target_namespace is None:
            raise ValueError("Invalid value for `target_namespace`, must not be `None`")  # noqa: E501

        self._target_namespace = target_namespace

    @property
    def target_identifier(self):
        """Gets the target_identifier of this IdentifierMapping.  # noqa: E501


        :return: The target_identifier of this IdentifierMapping.  # noqa: E501
        :rtype: str
        """
        return self._target_identifier

    @target_identifier.setter
    def target_identifier(self, target_identifier):
        """Sets the target_identifier of this IdentifierMapping.


        :param target_identifier: The target_identifier of this IdentifierMapping.  # noqa: E501
        :type: str
        """
        if target_identifier is None:
            raise ValueError("Invalid value for `target_identifier`, must not be `None`")  # noqa: E501

        self._target_identifier = target_identifier

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IdentifierMapping):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
