# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.model.base_model_ import Model
from openapi_server import util


class IdentifierMapping(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, source_identifier=None, target_namespace=None, target_identifier=None):  # noqa: E501
        """IdentifierMapping - a model defined in OpenAPI

        :param source_identifier: The source_identifier of this IdentifierMapping.  # noqa: E501
        :type source_identifier: str
        :param target_namespace: The target_namespace of this IdentifierMapping.  # noqa: E501
        :type target_namespace: str
        :param target_identifier: The target_identifier of this IdentifierMapping.  # noqa: E501
        :type target_identifier: str
        """
        self.openapi_types = {
            'source_identifier': str,
            'target_namespace': str,
            'target_identifier': str
        }

        self.attribute_map = {
            'source_identifier': 'source_identifier',
            'target_namespace': 'target_namespace',
            'target_identifier': 'target_identifier'
        }

        self._source_identifier = source_identifier
        self._target_namespace = target_namespace
        self._target_identifier = target_identifier

    @classmethod
    def from_dict(cls, dikt) -> 'IdentifierMapping':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The IdentifierMapping of this IdentifierMapping.  # noqa: E501
        :rtype: IdentifierMapping
        """
        return util.deserialize_model(dikt, cls)

    @property
    def source_identifier(self):
        """Gets the source_identifier of this IdentifierMapping.


        :return: The source_identifier of this IdentifierMapping.
        :rtype: str
        """
        return self._source_identifier

    @source_identifier.setter
    def source_identifier(self, source_identifier):
        """Sets the source_identifier of this IdentifierMapping.


        :param source_identifier: The source_identifier of this IdentifierMapping.
        :type source_identifier: str
        """
        if source_identifier is None:
            raise ValueError("Invalid value for `source_identifier`, must not be `None`")  # noqa: E501

        self._source_identifier = source_identifier

    @property
    def target_namespace(self):
        """Gets the target_namespace of this IdentifierMapping.


        :return: The target_namespace of this IdentifierMapping.
        :rtype: str
        """
        return self._target_namespace

    @target_namespace.setter
    def target_namespace(self, target_namespace):
        """Sets the target_namespace of this IdentifierMapping.


        :param target_namespace: The target_namespace of this IdentifierMapping.
        :type target_namespace: str
        """
        if target_namespace is None:
            raise ValueError("Invalid value for `target_namespace`, must not be `None`")  # noqa: E501

        self._target_namespace = target_namespace

    @property
    def target_identifier(self):
        """Gets the target_identifier of this IdentifierMapping.


        :return: The target_identifier of this IdentifierMapping.
        :rtype: str
        """
        return self._target_identifier

    @target_identifier.setter
    def target_identifier(self, target_identifier):
        """Sets the target_identifier of this IdentifierMapping.


        :param target_identifier: The target_identifier of this IdentifierMapping.
        :type target_identifier: str
        """
        if target_identifier is None:
            raise ValueError("Invalid value for `target_identifier`, must not be `None`")  # noqa: E501

        self._target_identifier = target_identifier
