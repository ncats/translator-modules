# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from ara_server.models.base_model_ import Model
from ara_server.models.credentials import Credentials
from ara_server import util

from ara_server.models.credentials import Credentials  # noqa: E501

class RemoteKnowledgeGraph(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, url=None, credentials=None, protocol='neo4j'):  # noqa: E501
        """RemoteKnowledgeGraph - a model defined in OpenAPI

        :param url: The url of this RemoteKnowledgeGraph.  # noqa: E501
        :type url: str
        :param credentials: The credentials of this RemoteKnowledgeGraph.  # noqa: E501
        :type credentials: List[Credentials]
        :param protocol: The protocol of this RemoteKnowledgeGraph.  # noqa: E501
        :type protocol: str
        """
        self.openapi_types = {
            'url': str,
            'credentials': List[Credentials],
            'protocol': str
        }

        self.attribute_map = {
            'url': 'url',
            'credentials': 'credentials',
            'protocol': 'protocol'
        }

        self._url = url
        self._credentials = credentials
        self._protocol = protocol

    @classmethod
    def from_dict(cls, dikt) -> 'RemoteKnowledgeGraph':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The RemoteKnowledgeGraph of this RemoteKnowledgeGraph.  # noqa: E501
        :rtype: RemoteKnowledgeGraph
        """
        return util.deserialize_model(dikt, cls)

    @property
    def url(self):
        """Gets the url of this RemoteKnowledgeGraph.

        URL that provides programmatic access to the remote knowledge graph  # noqa: E501

        :return: The url of this RemoteKnowledgeGraph.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this RemoteKnowledgeGraph.

        URL that provides programmatic access to the remote knowledge graph  # noqa: E501

        :param url: The url of this RemoteKnowledgeGraph.
        :type url: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")  # noqa: E501

        self._url = url

    @property
    def credentials(self):
        """Gets the credentials of this RemoteKnowledgeGraph.

        Credentials needed for programmatic access to the remote knowledge graph  # noqa: E501

        :return: The credentials of this RemoteKnowledgeGraph.
        :rtype: List[Credentials]
        """
        return self._credentials

    @credentials.setter
    def credentials(self, credentials):
        """Sets the credentials of this RemoteKnowledgeGraph.

        Credentials needed for programmatic access to the remote knowledge graph  # noqa: E501

        :param credentials: The credentials of this RemoteKnowledgeGraph.
        :type credentials: List[Credentials]
        """

        self._credentials = credentials

    @property
    def protocol(self):
        """Gets the protocol of this RemoteKnowledgeGraph.


        :return: The protocol of this RemoteKnowledgeGraph.
        :rtype: str
        """
        return self._protocol

    @protocol.setter
    def protocol(self, protocol):
        """Sets the protocol of this RemoteKnowledgeGraph.


        :param protocol: The protocol of this RemoteKnowledgeGraph.
        :type protocol: str
        """

        self._protocol = protocol
